namespace FEuler.Problems

[<RequireQualifiedAccess>]
module Problems1To10 =
    open FEuler.Core

    // Helper methods

    let private log20AndFloor = Math.floor << Math.log 20.0

    let private getMaxProductForPrime prime =
        prime ** log20AndFloor prime

    let private productOfDigits =
        Seq.fold (fun product c -> product * (Common.digitCharToLong c)) 1L

    // Problems

    (* 
    If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
    Find the sum of all the multiples of 3 or 5 below 1000.
    *)
    let solve1() =
        seq {1..999}  
        |> Seq.filter (fun n -> n % 3 = 0 || n % 5 = 0) 
        |> Seq.sum

    (* 
    Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
    *)
    let solve2() =
        Math.fibonacciSequence
        |> Seq.takeWhile (fun n -> n <= 4000000)
        |> Seq.filter (fun n -> n % 2 = 0)
        |> Seq.sum

    (* 
    The prime factors of 13195 are 5, 7, 13 and 29.

    What is the largest prime factor of the number 600851475143 ?
    *)
    let solve3() =
        600851475143.0
        |> sqrt         
        |> int
        |> Primes.primesSequence
        |> Seq.findBack (fun n -> 600851475143L % (int64 n) = 0L)

    (* 
    A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

    Find the largest palindrome made from the product of two 3-digit numbers.
    *)
    let solve4() =
        seq {for i in 100 .. 999 do
                for j in 100 .. 999 do
                    yield i * j}
        |> Seq.filter Math.isNumberPalindrome
        |> Seq.max
      
    (* 
    2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

    What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
    *)
    let solve5() =
        Primes.primesSequence 20
        |> Seq.map float
        |> Math.productBy getMaxProductForPrime
        |> int64

    (* 
    The sum of the squares of the first ten natural numbers is,
    1^2 + 2^2 + ... + 10^2 = 385

    The square of the sum of the first ten natural numbers is,
    (1 + 2 + ... + 10)^2 = 552 = 3025

    Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.

    Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
    *)
    let solve6() =
        let squareOfSum = (float <| Math.arithmeticSeriesSum 1 100 100) ** 2.0 |> int
        let sumOfSquares = [1..100] |> Seq.sumBy (fun n -> n * n)
        squareOfSum - sumOfSquares

    (* 
    The sum of the squares of the first ten natural numbers is,
    1^2 + 2^2 + ... + 10^2 = 385

    By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

    What is the 10,001st prime number?
    *)
    let solve7() =
        Seq.initInfinite (fun i -> 10.0 ** float i |> int)
        |> Seq.skipWhile (fun i -> i <= 10000)
        |> Seq.map Primes.primesSequence
        |> Seq.find (fun primes -> Seq.length primes >= 10001)
        |> Seq.item 10000

    (* 
    The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

    73167176531330624919225119674426574742355349194934
    96983520312774506326239578318016984801869478851843
    85861560789112949495459501737958331952853208805511
    12540698747158523863050715693290963295227443043557
    66896648950445244523161731856403098711121722383113
    62229893423380308135336276614282806444486645238749
    30358907296290491560440772390713810515859307960866
    70172427121883998797908792274921901699720888093776
    65727333001053367881220235421809751254540594752243
    52584907711670556013604839586446706324415722155397
    53697817977846174064955149290862569321978468622482
    83972241375657056057490261407972968652414535100474
    82166370484403199890008895243450658541227588666881
    16427171479924442928230863465674813919123162824586
    17866458359124566529476545682848912883142607690042
    24219022671055626321111109370544217506941658960408
    07198403850962455444362981230987879927244284909188
    84580156166097919133875499200524063689912560717606
    05886116467109405077541002256983155200055935729725
    71636269561882670428252483600823257530420752963450

    Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
    *)
    let solve8() =
        let longNumber = 
            "73167176531330624919225119674426574742355349194934"
            + "96983520312774506326239578318016984801869478851843"
            + "85861560789112949495459501737958331952853208805511"
            + "12540698747158523863050715693290963295227443043557"
            + "66896648950445244523161731856403098711121722383113"
            + "62229893423380308135336276614282806444486645238749"
            + "30358907296290491560440772390713810515859307960866"
            + "70172427121883998797908792274921901699720888093776"
            + "65727333001053367881220235421809751254540594752243"
            + "52584907711670556013604839586446706324415722155397"
            + "53697817977846174064955149290862569321978468622482"
            + "83972241375657056057490261407972968652414535100474"
            + "82166370484403199890008895243450658541227588666881"
            + "16427171479924442928230863465674813919123162824586"
            + "17866458359124566529476545682848912883142607690042"
            + "24219022671055626321111109370544217506941658960408"
            + "07198403850962455444362981230987879927244284909188"
            + "84580156166097919133875499200524063689912560717606"
            + "05886116467109405077541002256983155200055935729725"
            + "71636269561882670428252483600823257530420752963450"
        
        longNumber
        |> Seq.windowed 13
        |> Seq.map (Seq.sort >> Seq.toArray)
        |> Seq.map (fun c -> new System.String(c))
        |> Seq.max
        |> productOfDigits

    (* 
    A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
    a^2 + b^2 = c^2

    For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.

    There exists exactly one Pythagorean triplet for which a + b + c = 1000.
    Find the product abc.
    *)
    let solve9() =
        let (a, b, c) = 
            seq { for a in 1 .. 332 do 
                    for b in a + 1 .. 1000 - 2 * a - 1 do 
                        yield (a, b, 1000 - a - b) }
            |> Seq.find (fun (a, b, c) -> a*a + b*b = c*c)
            
        a * b * c